Coursera Data Science Final Presentation.pdf
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Coursera Data Science Final Project\n",
    "\n",
    "This project was completed for the Capstone Data Sceince course as part of the IBM Data Science Specialization.\n",
    "\n",
    "## Instructions\n",
    "\n",
    "Now that you have been equipped with the skills and the tools to use location data to explore a geographical location, over the course of two weeks, you will have the opportunity to be as creative as you want and come up with an idea to leverage the Foursquare location data to explore or compare neighborhoods or cities of your choice or to come up with a problem that you can use the Foursquare location data to solve. If you cannot think of an idea or a problem, here are some ideas to get you started:\n",
    "\n",
    "1) In Module 3, we explored New York City and the city of Toronto and segmented and clustered their neighborhoods. Both cities are very diverse and are the financial capitals of their respective countries. One interesting idea would be to compare the neighborhoods of the two cities and determine how similar or dissimilar they are. Is New York City more like Toronto or Paris or some other multicultural city? I will leave it to you to refine this idea.\n",
    "\n",
    "2) In a city of your choice, if someone is looking to open a restaurant, where would you recommend that they open it? Similarly, if a contractor is trying to start their own business, where would you recommend that they setup their office?\n",
    "\n",
    "These are just a couple of many ideas and problems that can be solved using location data in addition to other datasets. No matter what you decide to do, make sure to provide sufficient justification of why you think what you want to do or solve is important and why would a client or a group of people be interested in your project."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## A description of the problem and a discussion of the background.\n",
    "\n",
    "An individual wishes to move to London, however he has never lived in a large city before and wishes to live in a quieter borough of London. He is a freelance writer and likes to write in local coffee shops, thus it is important he lives in an area with lots of coffee shops to choose from. This project will be focus on helping to find the best borough of London for the individual to live in.\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## A description of the data and how it will be used to solve the problem. \n",
    "\n",
    "In order to find data for this project, we will scrape data from the table on the webpage: https://en.wikipedia.org/wiki/List_of_London_boroughs. This contains information on all 32 London boroughs. For this project we are interested in the name, location, area and population of the borough. The location of each borough will allow us to make a Foursquare call to identify the number of coffee shops in each borough. The size and population of each borough will allow us to calculate the population density, this will be used to identify how busy the area is."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  Data Preperation\n",
    "\n",
    "First we import the relevant packages."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from pandas.io.html import read_html\n",
    "\n",
    "import requests\n",
    "import numpy as np\n",
    "from geopy.geocoders import Nominatim \n",
    "from pandas.io.json import json_normalize  \n",
    "import folium \n",
    "from sklearn.cluster import KMeans\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.cm as cm\n",
    "import matplotlib.colors as colors"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First we scarpe the data and create a dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Borough</th>\n",
       "      <th>Co-ordinates</th>\n",
       "      <th>Area (sq mi)</th>\n",
       "      <th>Population (2013 est)[1]</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Barking and Dagenham [note 1]</td>\n",
       "      <td>51°33′39″N 0°09′21″E﻿ / ﻿51.5607°N 0.1557°E</td>\n",
       "      <td>13.93</td>\n",
       "      <td>194352</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Barnet</td>\n",
       "      <td>51°37′31″N 0°09′06″W﻿ / ﻿51.6252°N 0.1517°W</td>\n",
       "      <td>33.49</td>\n",
       "      <td>369088</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Bexley</td>\n",
       "      <td>51°27′18″N 0°09′02″E﻿ / ﻿51.4549°N 0.1505°E</td>\n",
       "      <td>23.38</td>\n",
       "      <td>236687</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Brent</td>\n",
       "      <td>51°33′32″N 0°16′54″W﻿ / ﻿51.5588°N 0.2817°W</td>\n",
       "      <td>16.70</td>\n",
       "      <td>317264</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Bromley</td>\n",
       "      <td>51°24′14″N 0°01′11″E﻿ / ﻿51.4039°N 0.0198°E</td>\n",
       "      <td>57.97</td>\n",
       "      <td>317899</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Camden</td>\n",
       "      <td>51°31′44″N 0°07′32″W﻿ / ﻿51.5290°N 0.1255°W</td>\n",
       "      <td>8.40</td>\n",
       "      <td>229719</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Croydon</td>\n",
       "      <td>51°22′17″N 0°05′52″W﻿ / ﻿51.3714°N 0.0977°W</td>\n",
       "      <td>33.41</td>\n",
       "      <td>372752</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Ealing</td>\n",
       "      <td>51°30′47″N 0°18′32″W﻿ / ﻿51.5130°N 0.3089°W</td>\n",
       "      <td>21.44</td>\n",
       "      <td>342494</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Enfield</td>\n",
       "      <td>51°39′14″N 0°04′48″W﻿ / ﻿51.6538°N 0.0799°W</td>\n",
       "      <td>31.74</td>\n",
       "      <td>320524</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Greenwich [note 2]</td>\n",
       "      <td>51°29′21″N 0°03′53″E﻿ / ﻿51.4892°N 0.0648°E</td>\n",
       "      <td>18.28</td>\n",
       "      <td>264008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Hackney</td>\n",
       "      <td>51°32′42″N 0°03′19″W﻿ / ﻿51.5450°N 0.0553°W</td>\n",
       "      <td>7.36</td>\n",
       "      <td>257379</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Hammersmith and Fulham [note 4]</td>\n",
       "      <td>51°29′34″N 0°14′02″W﻿ / ﻿51.4927°N 0.2339°W</td>\n",
       "      <td>6.33</td>\n",
       "      <td>178685</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Haringey</td>\n",
       "      <td>51°36′00″N 0°06′43″W﻿ / ﻿51.6000°N 0.1119°W</td>\n",
       "      <td>11.42</td>\n",
       "      <td>263386</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Harrow</td>\n",
       "      <td>51°35′23″N 0°20′05″W﻿ / ﻿51.5898°N 0.3346°W</td>\n",
       "      <td>19.49</td>\n",
       "      <td>243372</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Havering</td>\n",
       "      <td>51°34′52″N 0°11′01″E﻿ / ﻿51.5812°N 0.1837°E</td>\n",
       "      <td>43.35</td>\n",
       "      <td>242080</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Hillingdon</td>\n",
       "      <td>51°32′39″N 0°28′34″W﻿ / ﻿51.5441°N 0.4760°W</td>\n",
       "      <td>44.67</td>\n",
       "      <td>286806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Hounslow</td>\n",
       "      <td>51°28′29″N 0°22′05″W﻿ / ﻿51.4746°N 0.3680°W</td>\n",
       "      <td>21.61</td>\n",
       "      <td>262407</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Islington</td>\n",
       "      <td>51°32′30″N 0°06′08″W﻿ / ﻿51.5416°N 0.1022°W</td>\n",
       "      <td>5.74</td>\n",
       "      <td>215667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Kensington and Chelsea</td>\n",
       "      <td>51°30′07″N 0°11′41″W﻿ / ﻿51.5020°N 0.1947°W</td>\n",
       "      <td>4.68</td>\n",
       "      <td>155594</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Kingston upon Thames</td>\n",
       "      <td>51°24′31″N 0°18′23″W﻿ / ﻿51.4085°N 0.3064°W</td>\n",
       "      <td>14.38</td>\n",
       "      <td>166793</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Lambeth</td>\n",
       "      <td>51°27′39″N 0°06′59″W﻿ / ﻿51.4607°N 0.1163°W</td>\n",
       "      <td>10.36</td>\n",
       "      <td>314242</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Lewisham</td>\n",
       "      <td>51°26′43″N 0°01′15″W﻿ / ﻿51.4452°N 0.0209°W</td>\n",
       "      <td>13.57</td>\n",
       "      <td>286180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Merton</td>\n",
       "      <td>51°24′05″N 0°11′45″W﻿ / ﻿51.4014°N 0.1958°W</td>\n",
       "      <td>14.52</td>\n",
       "      <td>203223</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Newham</td>\n",
       "      <td>51°30′28″N 0°02′49″E﻿ / ﻿51.5077°N 0.0469°E</td>\n",
       "      <td>13.98</td>\n",
       "      <td>318227</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Redbridge</td>\n",
       "      <td>51°33′32″N 0°04′27″E﻿ / ﻿51.5590°N 0.0741°E</td>\n",
       "      <td>21.78</td>\n",
       "      <td>288272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Richmond upon Thames</td>\n",
       "      <td>51°26′52″N 0°19′34″W﻿ / ﻿51.4479°N 0.3260°W</td>\n",
       "      <td>22.17</td>\n",
       "      <td>191365</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Southwark</td>\n",
       "      <td>51°30′13″N 0°04′49″W﻿ / ﻿51.5035°N 0.0804°W</td>\n",
       "      <td>11.14</td>\n",
       "      <td>298464</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Sutton</td>\n",
       "      <td>51°21′42″N 0°11′40″W﻿ / ﻿51.3618°N 0.1945°W</td>\n",
       "      <td>16.93</td>\n",
       "      <td>195914</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Tower Hamlets</td>\n",
       "      <td>51°30′36″N 0°00′21″W﻿ / ﻿51.5099°N 0.0059°W</td>\n",
       "      <td>7.63</td>\n",
       "      <td>272890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Waltham Forest</td>\n",
       "      <td>51°35′27″N 0°00′48″W﻿ / ﻿51.5908°N 0.0134°W</td>\n",
       "      <td>14.99</td>\n",
       "      <td>265797</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>Wandsworth</td>\n",
       "      <td>51°27′24″N 0°11′28″W﻿ / ﻿51.4567°N 0.1910°W</td>\n",
       "      <td>13.23</td>\n",
       "      <td>310516</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>Westminster</td>\n",
       "      <td>51°29′50″N 0°08′14″W﻿ / ﻿51.4973°N 0.1372°W</td>\n",
       "      <td>8.29</td>\n",
       "      <td>226841</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            Borough  \\\n",
       "0     Barking and Dagenham [note 1]   \n",
       "1                            Barnet   \n",
       "2                            Bexley   \n",
       "3                             Brent   \n",
       "4                           Bromley   \n",
       "5                            Camden   \n",
       "6                           Croydon   \n",
       "7                            Ealing   \n",
       "8                           Enfield   \n",
       "9                Greenwich [note 2]   \n",
       "10                          Hackney   \n",
       "11  Hammersmith and Fulham [note 4]   \n",
       "12                         Haringey   \n",
       "13                           Harrow   \n",
       "14                         Havering   \n",
       "15                       Hillingdon   \n",
       "16                         Hounslow   \n",
       "17                        Islington   \n",
       "18           Kensington and Chelsea   \n",
       "19             Kingston upon Thames   \n",
       "20                          Lambeth   \n",
       "21                         Lewisham   \n",
       "22                           Merton   \n",
       "23                           Newham   \n",
       "24                        Redbridge   \n",
       "25             Richmond upon Thames   \n",
       "26                        Southwark   \n",
       "27                           Sutton   \n",
       "28                    Tower Hamlets   \n",
       "29                   Waltham Forest   \n",
       "30                       Wandsworth   \n",
       "31                      Westminster   \n",
       "\n",
       "                                   Co-ordinates  Area (sq mi)  \\\n",
       "0   51°33′39″N 0°09′21″E﻿ / ﻿51.5607°N 0.1557°E         13.93   \n",
       "1   51°37′31″N 0°09′06″W﻿ / ﻿51.6252°N 0.1517°W         33.49   \n",
       "2   51°27′18″N 0°09′02″E﻿ / ﻿51.4549°N 0.1505°E         23.38   \n",
       "3   51°33′32″N 0°16′54″W﻿ / ﻿51.5588°N 0.2817°W         16.70   \n",
       "4   51°24′14″N 0°01′11″E﻿ / ﻿51.4039°N 0.0198°E         57.97   \n",
       "5   51°31′44″N 0°07′32″W﻿ / ﻿51.5290°N 0.1255°W          8.40   \n",
       "6   51°22′17″N 0°05′52″W﻿ / ﻿51.3714°N 0.0977°W         33.41   \n",
       "7   51°30′47″N 0°18′32″W﻿ / ﻿51.5130°N 0.3089°W         21.44   \n",
       "8   51°39′14″N 0°04′48″W﻿ / ﻿51.6538°N 0.0799°W         31.74   \n",
       "9   51°29′21″N 0°03′53″E﻿ / ﻿51.4892°N 0.0648°E         18.28   \n",
       "10  51°32′42″N 0°03′19″W﻿ / ﻿51.5450°N 0.0553°W          7.36   \n",
       "11  51°29′34″N 0°14′02″W﻿ / ﻿51.4927°N 0.2339°W          6.33   \n",
       "12  51°36′00″N 0°06′43″W﻿ / ﻿51.6000°N 0.1119°W         11.42   \n",
       "13  51°35′23″N 0°20′05″W﻿ / ﻿51.5898°N 0.3346°W         19.49   \n",
       "14  51°34′52″N 0°11′01″E﻿ / ﻿51.5812°N 0.1837°E         43.35   \n",
       "15  51°32′39″N 0°28′34″W﻿ / ﻿51.5441°N 0.4760°W         44.67   \n",
       "16  51°28′29″N 0°22′05″W﻿ / ﻿51.4746°N 0.3680°W         21.61   \n",
       "17  51°32′30″N 0°06′08″W﻿ / ﻿51.5416°N 0.1022°W          5.74   \n",
       "18  51°30′07″N 0°11′41″W﻿ / ﻿51.5020°N 0.1947°W          4.68   \n",
       "19  51°24′31″N 0°18′23″W﻿ / ﻿51.4085°N 0.3064°W         14.38   \n",
       "20  51°27′39″N 0°06′59″W﻿ / ﻿51.4607°N 0.1163°W         10.36   \n",
       "21  51°26′43″N 0°01′15″W﻿ / ﻿51.4452°N 0.0209°W         13.57   \n",
       "22  51°24′05″N 0°11′45″W﻿ / ﻿51.4014°N 0.1958°W         14.52   \n",
       "23  51°30′28″N 0°02′49″E﻿ / ﻿51.5077°N 0.0469°E         13.98   \n",
       "24  51°33′32″N 0°04′27″E﻿ / ﻿51.5590°N 0.0741°E         21.78   \n",
       "25  51°26′52″N 0°19′34″W﻿ / ﻿51.4479°N 0.3260°W         22.17   \n",
       "26  51°30′13″N 0°04′49″W﻿ / ﻿51.5035°N 0.0804°W         11.14   \n",
       "27  51°21′42″N 0°11′40″W﻿ / ﻿51.3618°N 0.1945°W         16.93   \n",
       "28  51°30′36″N 0°00′21″W﻿ / ﻿51.5099°N 0.0059°W          7.63   \n",
       "29  51°35′27″N 0°00′48″W﻿ / ﻿51.5908°N 0.0134°W         14.99   \n",
       "30  51°27′24″N 0°11′28″W﻿ / ﻿51.4567°N 0.1910°W         13.23   \n",
       "31  51°29′50″N 0°08′14″W﻿ / ﻿51.4973°N 0.1372°W          8.29   \n",
       "\n",
       "    Population (2013 est)[1]  \n",
       "0                     194352  \n",
       "1                     369088  \n",
       "2                     236687  \n",
       "3                     317264  \n",
       "4                     317899  \n",
       "5                     229719  \n",
       "6                     372752  \n",
       "7                     342494  \n",
       "8                     320524  \n",
       "9                     264008  \n",
       "10                    257379  \n",
       "11                    178685  \n",
       "12                    263386  \n",
       "13                    243372  \n",
       "14                    242080  \n",
       "15                    286806  \n",
       "16                    262407  \n",
       "17                    215667  \n",
       "18                    155594  \n",
       "19                    166793  \n",
       "20                    314242  \n",
       "21                    286180  \n",
       "22                    203223  \n",
       "23                    318227  \n",
       "24                    288272  \n",
       "25                    191365  \n",
       "26                    298464  \n",
       "27                    195914  \n",
       "28                    272890  \n",
       "29                    265797  \n",
       "30                    310516  \n",
       "31                    226841  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "url = 'https://en.wikipedia.org/wiki/List_of_London_boroughs'\n",
    "wikipages = read_html(url , attrs = {'class' : 'wikitable'})\n",
    "\n",
    "df = pd.DataFrame(wikipages[0] , columns=['Borough' , 'Co-ordinates' , 'Area (sq mi)' , 'Population (2013 est)[1]'])\n",
    "df.head(32)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In order to use the Foursquare API, we require a latitude and longitude value for each borough. The co-ordinates column in the above dataframe contains a complex string, so we will format this in order to attain a latitude column and longitiude column containing floats. Below we create a dataframe containing only latitude and longitude values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>51.5607</td>\n",
       "      <td>0.1557</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>51.6252</td>\n",
       "      <td>-0.1517</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>51.4549</td>\n",
       "      <td>0.1505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>51.5588</td>\n",
       "      <td>-0.2817</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>51.4039</td>\n",
       "      <td>0.0198</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Latitude  Longitude\n",
       "0   51.5607     0.1557\n",
       "1   51.6252    -0.1517\n",
       "2   51.4549     0.1505\n",
       "3   51.5588    -0.2817\n",
       "4   51.4039     0.0198"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df.rename(columns={'Co-ordinates': 'Coordinates'})\n",
    "\n",
    "ll = df.Coordinates.str.split(\"/\").apply(pd.Series) \n",
    "ll.columns = [\"Delete\", \"Coordinates\"]\n",
    "ll = ll.drop(ll.columns[0], 1) #Removes the sexagesimal degree co-ordinates\n",
    "\n",
    "ll = ll.Coordinates.str.split(\" \").apply(pd.Series)\n",
    "ll = ll.drop(ll.columns[0], 1) #Splits Latitude and Longitude into differnt columns \n",
    "\n",
    "\n",
    "ll.columns = [\"Latitude\" , \"Longitude\"]\n",
    "\n",
    "ll['Latitude'] = ll['Latitude'].map(lambda x: str(x)[:-2]) \n",
    "ll['Longitude'] = ll['Longitude'].map(lambda x: str(x)[:-2])\n",
    "ll['Latitude'] = ll['Latitude'].str[1:] #Removes characters before and after the co-ordinate values\n",
    "\n",
    "ll['Longitude'] = ll['Longitude'].astype(float)\n",
    "ll['Latitude'] = ll['Latitude'].astype(float) #Convert entires from strings to floats\n",
    "\n",
    "ll['Longitude'] = - ll['Longitude'] \n",
    "ll.loc[0, 'Longitude'] = -ll.loc[0, 'Longitude'] \n",
    "ll.loc[2, 'Longitude'] = -ll.loc[2, 'Longitude'] \n",
    "ll.loc[4, 'Longitude'] = -ll.loc[4, 'Longitude']\n",
    "ll.loc[9, 'Longitude'] = -ll.loc[9, 'Longitude'] \n",
    "ll.loc[14, 'Longitude'] = -ll.loc[14, 'Longitude'] \n",
    "ll.loc[23, 'Longitude'] = -ll.loc[23, 'Longitude'] \n",
    "ll.loc[24, 'Longitude'] = -ll.loc[24, 'Longitude'] #Manually convert any west longitude values to negative \n",
    "\n",
    "ll.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looking at the original dataframe, we see some of the Borough names contain a \"[note ]\", we will manually remove these and create a dataframe containing only borough names."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Borough</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Barking and Dagenham</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Barnet</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Bexley</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Brent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Bromley</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                Borough\n",
       "0  Barking and Dagenham\n",
       "1                Barnet\n",
       "2                Bexley\n",
       "3                 Brent\n",
       "4               Bromley"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1 = df.drop(df.columns[1],1)\n",
    "df1.loc[0, 'Borough'] = 'Barking and Dagenham'\n",
    "df1.loc[9, 'Borough'] = 'Greenwich'\n",
    "df1.loc[11, 'Borough'] = 'Hammersmith and Fulham'\n",
    "df1 = df1.drop('Area (sq mi)' , axis = 1 )\n",
    "df1 = df1.drop('Population (2013 est)[1]' , axis = 1)\n",
    "\n",
    "df1.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we are ready to create a final dataframe that will use for analyses. To do this we combine the previous two dataframes and add a population density column. We do this by dividing the population of the borough by area of the borough, this gives us the population per square mile."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Borough</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>Density</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Barking and Dagenham</td>\n",
       "      <td>51.5607</td>\n",
       "      <td>0.1557</td>\n",
       "      <td>13952.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Barnet</td>\n",
       "      <td>51.6252</td>\n",
       "      <td>-0.1517</td>\n",
       "      <td>11021.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Bexley</td>\n",
       "      <td>51.4549</td>\n",
       "      <td>0.1505</td>\n",
       "      <td>10123.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Brent</td>\n",
       "      <td>51.5588</td>\n",
       "      <td>-0.2817</td>\n",
       "      <td>18998.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Bromley</td>\n",
       "      <td>51.4039</td>\n",
       "      <td>0.0198</td>\n",
       "      <td>5484.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Camden</td>\n",
       "      <td>51.5290</td>\n",
       "      <td>-0.1255</td>\n",
       "      <td>27348.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Croydon</td>\n",
       "      <td>51.3714</td>\n",
       "      <td>-0.0977</td>\n",
       "      <td>11157.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Ealing</td>\n",
       "      <td>51.5130</td>\n",
       "      <td>-0.3089</td>\n",
       "      <td>15975.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Enfield</td>\n",
       "      <td>51.6538</td>\n",
       "      <td>-0.0799</td>\n",
       "      <td>10098.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Greenwich</td>\n",
       "      <td>51.4892</td>\n",
       "      <td>0.0648</td>\n",
       "      <td>14442.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Hackney</td>\n",
       "      <td>51.5450</td>\n",
       "      <td>-0.0553</td>\n",
       "      <td>34970.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Hammersmith and Fulham</td>\n",
       "      <td>51.4927</td>\n",
       "      <td>-0.2339</td>\n",
       "      <td>28228.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Haringey</td>\n",
       "      <td>51.6000</td>\n",
       "      <td>-0.1119</td>\n",
       "      <td>23064.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Harrow</td>\n",
       "      <td>51.5898</td>\n",
       "      <td>-0.3346</td>\n",
       "      <td>12487.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Havering</td>\n",
       "      <td>51.5812</td>\n",
       "      <td>0.1837</td>\n",
       "      <td>5584.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Hillingdon</td>\n",
       "      <td>51.5441</td>\n",
       "      <td>-0.4760</td>\n",
       "      <td>6421.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Hounslow</td>\n",
       "      <td>51.4746</td>\n",
       "      <td>-0.3680</td>\n",
       "      <td>12143.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Islington</td>\n",
       "      <td>51.5416</td>\n",
       "      <td>-0.1022</td>\n",
       "      <td>37573.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Kensington and Chelsea</td>\n",
       "      <td>51.5020</td>\n",
       "      <td>-0.1947</td>\n",
       "      <td>33247.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Kingston upon Thames</td>\n",
       "      <td>51.4085</td>\n",
       "      <td>-0.3064</td>\n",
       "      <td>11599.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Lambeth</td>\n",
       "      <td>51.4607</td>\n",
       "      <td>-0.1163</td>\n",
       "      <td>30332.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Lewisham</td>\n",
       "      <td>51.4452</td>\n",
       "      <td>-0.0209</td>\n",
       "      <td>21089.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Merton</td>\n",
       "      <td>51.4014</td>\n",
       "      <td>-0.1958</td>\n",
       "      <td>13996.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Newham</td>\n",
       "      <td>51.5077</td>\n",
       "      <td>0.0469</td>\n",
       "      <td>22763.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Redbridge</td>\n",
       "      <td>51.5590</td>\n",
       "      <td>0.0741</td>\n",
       "      <td>13236.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Richmond upon Thames</td>\n",
       "      <td>51.4479</td>\n",
       "      <td>-0.3260</td>\n",
       "      <td>8632.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Southwark</td>\n",
       "      <td>51.5035</td>\n",
       "      <td>-0.0804</td>\n",
       "      <td>26792.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Sutton</td>\n",
       "      <td>51.3618</td>\n",
       "      <td>-0.1945</td>\n",
       "      <td>11572.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Tower Hamlets</td>\n",
       "      <td>51.5099</td>\n",
       "      <td>-0.0059</td>\n",
       "      <td>35765.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Waltham Forest</td>\n",
       "      <td>51.5908</td>\n",
       "      <td>-0.0134</td>\n",
       "      <td>17732.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>Wandsworth</td>\n",
       "      <td>51.4567</td>\n",
       "      <td>-0.1910</td>\n",
       "      <td>23471.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>Westminster</td>\n",
       "      <td>51.4973</td>\n",
       "      <td>-0.1372</td>\n",
       "      <td>27363.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Borough  Latitude  Longitude  Density\n",
       "0     Barking and Dagenham   51.5607     0.1557  13952.0\n",
       "1                   Barnet   51.6252    -0.1517  11021.0\n",
       "2                   Bexley   51.4549     0.1505  10123.0\n",
       "3                    Brent   51.5588    -0.2817  18998.0\n",
       "4                  Bromley   51.4039     0.0198   5484.0\n",
       "5                   Camden   51.5290    -0.1255  27348.0\n",
       "6                  Croydon   51.3714    -0.0977  11157.0\n",
       "7                   Ealing   51.5130    -0.3089  15975.0\n",
       "8                  Enfield   51.6538    -0.0799  10098.0\n",
       "9                Greenwich   51.4892     0.0648  14442.0\n",
       "10                 Hackney   51.5450    -0.0553  34970.0\n",
       "11  Hammersmith and Fulham   51.4927    -0.2339  28228.0\n",
       "12                Haringey   51.6000    -0.1119  23064.0\n",
       "13                  Harrow   51.5898    -0.3346  12487.0\n",
       "14                Havering   51.5812     0.1837   5584.0\n",
       "15              Hillingdon   51.5441    -0.4760   6421.0\n",
       "16                Hounslow   51.4746    -0.3680  12143.0\n",
       "17               Islington   51.5416    -0.1022  37573.0\n",
       "18  Kensington and Chelsea   51.5020    -0.1947  33247.0\n",
       "19    Kingston upon Thames   51.4085    -0.3064  11599.0\n",
       "20                 Lambeth   51.4607    -0.1163  30332.0\n",
       "21                Lewisham   51.4452    -0.0209  21089.0\n",
       "22                  Merton   51.4014    -0.1958  13996.0\n",
       "23                  Newham   51.5077     0.0469  22763.0\n",
       "24               Redbridge   51.5590     0.0741  13236.0\n",
       "25    Richmond upon Thames   51.4479    -0.3260   8632.0\n",
       "26               Southwark   51.5035    -0.0804  26792.0\n",
       "27                  Sutton   51.3618    -0.1945  11572.0\n",
       "28           Tower Hamlets   51.5099    -0.0059  35765.0\n",
       "29          Waltham Forest   51.5908    -0.0134  17732.0\n",
       "30              Wandsworth   51.4567    -0.1910  23471.0\n",
       "31             Westminster   51.4973    -0.1372  27363.0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_london = df1\n",
    "df_london['Latitude'] = ll['Latitude']\n",
    "df_london['Longitude'] = ll['Longitude']\n",
    "df_london['Density'] = df['Population (2013 est)[1]']/df['Area (sq mi)']\n",
    "df_london['Density'] = df_london['Density'].round()\n",
    "\n",
    "display(df_london)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Methodology\n",
    "\n",
    "The  individual has two criteria for choosing a borough in London: he wishes to live in a ‘quiet’ area and to be close to  multiple coffee shops.\n",
    "\n",
    "In order to identify which boroughs are ‘quiet’, we will find the population density by dividing the population of the borough by its area in square miles. This will give us the population per square mile.\n",
    "\n",
    "In order to ensure the borough has multiple coffee shops, we will use the Foursquare API to find all the coffee shops within a 1km radius of the centre of the borough. To do this we will use the coordinates found in our dataframe.\n",
    "\n",
    "\n",
    "## Analysis\n",
    "\n",
    "## Population Density\n",
    "\n",
    "First we will investigate which Boroughs are 'quieter', in order to do this we will look at the population density. A bar chart comparing the density of all 32 London borough is shown below. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = df_london['Borough']\n",
    "y = df_london['Density']\n",
    "labels = df_london['Borough']\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "bar = ax.bar(x, y)\n",
    "\n",
    "ax.set_ylim(0,40000)\n",
    "ax.set_ylabel('Population Density')\n",
    "ax.set_title('Population Density of London Boroughs')\n",
    "ax.set_xticklabels(labels , rotation='vertical') #adds vertical labels to each bar\n",
    "\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looking at the bar chart, we see a large variation in population density, ranging from the most dense Islington to the least dense Bromley. For this project we will consider a borough with population density below 10,000 people per square mile to be 'quiet'. We will now create a dataframe containing only locations that fit this criteria."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Borough</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>Density</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Bromley</td>\n",
       "      <td>51.4039</td>\n",
       "      <td>0.0198</td>\n",
       "      <td>5484.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Havering</td>\n",
       "      <td>51.5812</td>\n",
       "      <td>0.1837</td>\n",
       "      <td>5584.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Hillingdon</td>\n",
       "      <td>51.5441</td>\n",
       "      <td>-0.4760</td>\n",
       "      <td>6421.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Richmond upon Thames</td>\n",
       "      <td>51.4479</td>\n",
       "      <td>-0.3260</td>\n",
       "      <td>8632.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Borough  Latitude  Longitude  Density\n",
       "4                Bromley   51.4039     0.0198   5484.0\n",
       "14              Havering   51.5812     0.1837   5584.0\n",
       "15            Hillingdon   51.5441    -0.4760   6421.0\n",
       "25  Richmond upon Thames   51.4479    -0.3260   8632.0"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_density = df_london[df_london.Density <= 10000]\n",
    "\n",
    "df_density.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looking at the dataframe, we see there are four boroughs that we classify as 'quiet'."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next we will investigate which of these boroughs meet the criteria of having lots of coffee shops to choose from. Using the Foursquare API, we will see how many Coffee shops can be found within a 1km radius of the centre of the borough.\n",
    "\n",
    "First we enter our personal Foursquare details. These have been removed on the Github repositry."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "CLIENT_ID = 'V50IUN30HXV4NN03Q5MDIKVSQJROYRW1KHYNIZMN0SK0E4KH'\n",
    "CLIENT_SECRET = '0S1GVZD1APYRQDOXIBDLEZQTMDLXKHUYDRV2CLIR1KUSHSZY'\n",
    "VERSION = '20180605'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Bromley"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, we find the latitude and longitude of Bromley."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "latitude = round(df_density.loc[4, 'Latitude'] , 2)\n",
    "longitude = round(df_density.loc[4, 'Longitude'] , 2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we search all venues within a 1000m or 1km radius of these coordinates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "radius = 1000\n",
    "\n",
    "url = 'https://api.foursquare.com/v2/venues/explore?&client_id={}&client_secret={}&v={}&ll={},{}&radius={}'.format(\n",
    "    CLIENT_ID, \n",
    "    CLIENT_SECRET, \n",
    "    VERSION, \n",
    "    latitude,\n",
    "    longitude,\n",
    "    radius, \n",
    "    )\n",
    "\n",
    "results = requests.get(url).json()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To extract the category of the venue we use the following function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def get_category_type(row):\n",
    "    try:\n",
    "        categories_list = row['categories']\n",
    "    except:\n",
    "        categories_list = row['venue.categories']\n",
    "        \n",
    "    if len(categories_list) == 0:\n",
    "        return None\n",
    "    else:\n",
    "        return categories_list[0]['name']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we are ready to clean the json and structure it into a pandas dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/ConorSharpe/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:3: FutureWarning: pandas.io.json.json_normalize is deprecated, use pandas.json_normalize instead\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>categories</th>\n",
       "      <th>lat</th>\n",
       "      <th>lng</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Unico</td>\n",
       "      <td>Ice Cream Shop</td>\n",
       "      <td>51.402189</td>\n",
       "      <td>0.015725</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>wilko</td>\n",
       "      <td>Furniture / Home Store</td>\n",
       "      <td>51.401040</td>\n",
       "      <td>0.016110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Marks &amp; Spencer</td>\n",
       "      <td>Department Store</td>\n",
       "      <td>51.404017</td>\n",
       "      <td>0.015718</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Apple Bromley</td>\n",
       "      <td>Electronics Store</td>\n",
       "      <td>51.402940</td>\n",
       "      <td>0.016252</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Church House Gardens</td>\n",
       "      <td>Park</td>\n",
       "      <td>51.403010</td>\n",
       "      <td>0.012149</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   name              categories        lat       lng\n",
       "0                 Unico          Ice Cream Shop  51.402189  0.015725\n",
       "1                 wilko  Furniture / Home Store  51.401040  0.016110\n",
       "2       Marks & Spencer        Department Store  51.404017  0.015718\n",
       "3         Apple Bromley       Electronics Store  51.402940  0.016252\n",
       "4  Church House Gardens                    Park  51.403010  0.012149"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "venues = results['response']['groups'][0]['items']\n",
    "    \n",
    "nearby_venues = json_normalize(venues) # flatten JSON\n",
    "\n",
    "filtered_columns = ['venue.name', 'venue.categories', 'venue.location.lat', 'venue.location.lng']\n",
    "nearby_venues =nearby_venues.loc[:, filtered_columns] # filter columns\n",
    "\n",
    "nearby_venues['venue.categories'] = nearby_venues.apply(get_category_type, axis=1) # filter the category for each row\n",
    "\n",
    "nearby_venues.columns = [col.split(\".\")[-1] for col in nearby_venues.columns]# clean columns\n",
    "\n",
    "nearby_venues.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And finally, we create a dataframe containg only venues in the 'Coffee Shop' catergory."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>categories</th>\n",
       "      <th>lat</th>\n",
       "      <th>lng</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Caffè Nero</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>51.402653</td>\n",
       "      <td>0.015616</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Caffè Nero</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>51.400063</td>\n",
       "      <td>0.017092</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Costa Coffee</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>51.404458</td>\n",
       "      <td>0.016645</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Costa Coffee</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>51.405653</td>\n",
       "      <td>0.015279</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            name   categories        lat       lng\n",
       "10    Caffè Nero  Coffee Shop  51.402653  0.015616\n",
       "22    Caffè Nero  Coffee Shop  51.400063  0.017092\n",
       "23  Costa Coffee  Coffee Shop  51.404458  0.016645\n",
       "24  Costa Coffee  Coffee Shop  51.405653  0.015279"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bromley_coffee = nearby_venues[nearby_venues.categories == \"Coffee Shop\"]\n",
    "\n",
    "bromley_coffee"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bromley has 4 Coffee Shops and a population density of 5484.0 per square mile.\n"
     ]
    }
   ],
   "source": [
    "print('Bromley has {} Coffee Shops and a population density of {} per square mile.'.format(len(bromley_coffee) , df_density.iloc[0,3] ))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This process is repeated for the other three 'quiet' boroughs."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Havering\t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/ConorSharpe/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:31: FutureWarning: pandas.io.json.json_normalize is deprecated, use pandas.json_normalize instead\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>categories</th>\n",
       "      <th>lat</th>\n",
       "      <th>lng</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Costa Coffee</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>51.576890</td>\n",
       "      <td>0.179497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Costa Coffee</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>51.576481</td>\n",
       "      <td>0.182448</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Starbucks</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>51.576281</td>\n",
       "      <td>0.181187</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Costa Coffee</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>51.579747</td>\n",
       "      <td>0.182072</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Starbucks</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>51.577947</td>\n",
       "      <td>0.182874</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            name   categories        lat       lng\n",
       "0   Costa Coffee  Coffee Shop  51.576890  0.179497\n",
       "2   Costa Coffee  Coffee Shop  51.576481  0.182448\n",
       "11     Starbucks  Coffee Shop  51.576281  0.181187\n",
       "24  Costa Coffee  Coffee Shop  51.579747  0.182072\n",
       "29     Starbucks  Coffee Shop  51.577947  0.182874"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "latitude = round(float(df_density.loc[14, 'Latitude']) , 2)\n",
    "longitude = round(float(df_density.loc[14, 'Longitude']) , 2)\n",
    "\n",
    "\n",
    "radius = 1000\n",
    "url = 'https://api.foursquare.com/v2/venues/explore?&client_id={}&client_secret={}&v={}&ll={},{}&radius={}'.format(\n",
    "    CLIENT_ID, \n",
    "    CLIENT_SECRET, \n",
    "    VERSION, \n",
    "    latitude,\n",
    "    longitude,\n",
    "    radius, \n",
    "    )\n",
    "\n",
    "results = requests.get(url).json()\n",
    "\n",
    "\n",
    "def get_category_type(row):\n",
    "    try:\n",
    "        categories_list = row['categories']\n",
    "    except:\n",
    "        categories_list = row['venue.categories']\n",
    "        \n",
    "    if len(categories_list) == 0:\n",
    "        return None\n",
    "    else:\n",
    "        return categories_list[0]['name']\n",
    "    \n",
    "venues = results['response']['groups'][0]['items']\n",
    "    \n",
    "nearby_venues = json_normalize(venues) \n",
    "\n",
    "\n",
    "filtered_columns = ['venue.name', 'venue.categories', 'venue.location.lat', 'venue.location.lng']\n",
    "nearby_venues =nearby_venues.loc[:, filtered_columns]\n",
    "\n",
    "\n",
    "nearby_venues['venue.categories'] = nearby_venues.apply(get_category_type, axis=1)\n",
    "\n",
    "\n",
    "nearby_venues.columns = [col.split(\".\")[-1] for col in nearby_venues.columns] \n",
    "\n",
    "havering_coffee = nearby_venues[nearby_venues.categories == \"Coffee Shop\"]\n",
    "\n",
    "havering_coffee"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Havering has 5 Coffee Shops and a population density of 5584.0 per square mile.\n"
     ]
    }
   ],
   "source": [
    "print('Havering has {} Coffee Shops and a population density of {} per square mile.'.format(len(havering_coffee) , df_density.iloc[1,3] ))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Hillingdon"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/ConorSharpe/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:31: FutureWarning: pandas.io.json.json_normalize is deprecated, use pandas.json_normalize instead\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>categories</th>\n",
       "      <th>lat</th>\n",
       "      <th>lng</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Caffè Nero</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>51.545373</td>\n",
       "      <td>-0.477829</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Coffee Break</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>51.545263</td>\n",
       "      <td>-0.477433</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Starbucks</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>51.545742</td>\n",
       "      <td>-0.478584</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Costa Coffee</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>51.546541</td>\n",
       "      <td>-0.479912</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Harris + Hoole</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>51.546152</td>\n",
       "      <td>-0.479353</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              name   categories        lat       lng\n",
       "2       Caffè Nero  Coffee Shop  51.545373 -0.477829\n",
       "4     Coffee Break  Coffee Shop  51.545263 -0.477433\n",
       "6        Starbucks  Coffee Shop  51.545742 -0.478584\n",
       "11    Costa Coffee  Coffee Shop  51.546541 -0.479912\n",
       "19  Harris + Hoole  Coffee Shop  51.546152 -0.479353"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "latitude = round(float(df_density.loc[15, 'Latitude']) , 2)\n",
    "longitude = round(float(df_density.loc[15, 'Longitude']) , 2)\n",
    "\n",
    "\n",
    "radius = 1000\n",
    "url = 'https://api.foursquare.com/v2/venues/explore?&client_id={}&client_secret={}&v={}&ll={},{}&radius={}'.format(\n",
    "    CLIENT_ID, \n",
    "    CLIENT_SECRET, \n",
    "    VERSION, \n",
    "    latitude,\n",
    "    longitude,\n",
    "    radius, \n",
    "    )\n",
    "\n",
    "results = requests.get(url).json()\n",
    "\n",
    "\n",
    "def get_category_type(row):\n",
    "    try:\n",
    "        categories_list = row['categories']\n",
    "    except:\n",
    "        categories_list = row['venue.categories']\n",
    "        \n",
    "    if len(categories_list) == 0:\n",
    "        return None\n",
    "    else:\n",
    "        return categories_list[0]['name']\n",
    "    \n",
    "venues = results['response']['groups'][0]['items']\n",
    "    \n",
    "nearby_venues = json_normalize(venues) \n",
    "\n",
    "\n",
    "filtered_columns = ['venue.name', 'venue.categories', 'venue.location.lat', 'venue.location.lng']\n",
    "nearby_venues =nearby_venues.loc[:, filtered_columns]\n",
    "\n",
    "nearby_venues['venue.categories'] = nearby_venues.apply(get_category_type, axis=1)\n",
    "\n",
    "nearby_venues.columns = [col.split(\".\")[-1] for col in nearby_venues.columns] \n",
    "\n",
    "hillingdon_coffee = nearby_venues[nearby_venues.categories == \"Coffee Shop\"]\n",
    "\n",
    "hillingdon_coffee"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hillingdon has 5 Coffee Shops and a population density of 6421.0 per square mile.\n"
     ]
    }
   ],
   "source": [
    "print('Hillingdon has {} Coffee Shops and a population density of {} per square mile.'.format(len(hillingdon_coffee) , df_density.iloc[2,3] ))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Richmond upon Thames"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/ConorSharpe/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:30: FutureWarning: pandas.io.json.json_normalize is deprecated, use pandas.json_normalize instead\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>categories</th>\n",
       "      <th>lat</th>\n",
       "      <th>lng</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>The Press Room</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>51.447645</td>\n",
       "      <td>-0.328727</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Cafe Bellisimo</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>51.447639</td>\n",
       "      <td>-0.328860</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Harris + Hoole</td>\n",
       "      <td>Coffee Shop</td>\n",
       "      <td>51.446143</td>\n",
       "      <td>-0.328734</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              name   categories        lat       lng\n",
       "0   The Press Room  Coffee Shop  51.447645 -0.328727\n",
       "3   Cafe Bellisimo  Coffee Shop  51.447639 -0.328860\n",
       "17  Harris + Hoole  Coffee Shop  51.446143 -0.328734"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "latitude = round(float(df_density.loc[25, 'Latitude']) , 2)\n",
    "longitude = round(float(df_density.loc[25, 'Longitude']) , 2)\n",
    "\n",
    "\n",
    "radius = 1000\n",
    "url = 'https://api.foursquare.com/v2/venues/explore?&client_id={}&client_secret={}&v={}&ll={},{}&radius={}'.format(\n",
    "    CLIENT_ID, \n",
    "    CLIENT_SECRET, \n",
    "    VERSION, \n",
    "    latitude,\n",
    "    longitude,\n",
    "    radius, \n",
    "    )\n",
    "\n",
    "results = requests.get(url).json()\n",
    "\n",
    "def get_category_type(row):\n",
    "    try:\n",
    "        categories_list = row['categories']\n",
    "    except:\n",
    "        categories_list = row['venue.categories']\n",
    "        \n",
    "    if len(categories_list) == 0:\n",
    "        return None\n",
    "    else:\n",
    "        return categories_list[0]['name']\n",
    "    \n",
    "venues = results['response']['groups'][0]['items']\n",
    "    \n",
    "nearby_venues = json_normalize(venues) \n",
    "\n",
    "filtered_columns = ['venue.name', 'venue.categories', 'venue.location.lat', 'venue.location.lng']\n",
    "nearby_venues =nearby_venues.loc[:, filtered_columns]\n",
    "\n",
    "nearby_venues['venue.categories'] = nearby_venues.apply(get_category_type, axis=1)\n",
    "\n",
    "nearby_venues.columns = [col.split(\".\")[-1] for col in nearby_venues.columns] \n",
    "\n",
    "richmond_upon_thames_coffee = nearby_venues[nearby_venues.categories == \"Coffee Shop\"]\n",
    "\n",
    "richmond_upon_thames_coffee"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 387,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Richmond upon Thames has 3 Coffee Shops and a population density of 8632.0 per square mile.\n"
     ]
    }
   ],
   "source": [
    "print('Richmond upon Thames has {} Coffee Shops and a population density of {} per square mile.'.format(len(richmond_upon_thames_coffee) , df_density.iloc[3,3] ))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below we see a scatter plot with population density plotted against number of coffee shops. The boroughs that are 'quiet' and have a low population density appear in the lower right portion of the scatter plot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(5, 5800, 'Havering')"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = [len(bromley_coffee), len(havering_coffee) , len(hillingdon_coffee) ,len(richmond_upon_thames_coffee)]\n",
    "y = df_density['Density']         \n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.scatter(x, y)\n",
    "\n",
    "plt.ylim(4000, 9500)\n",
    "plt.xlim(2,6)\n",
    "plt.title('Population Density vs Number of Coffee shops in London Boroughs')\n",
    "plt.ylabel('Number of people per square mile')\n",
    "plt.xlabel('Number of Coffee shops within 1000 meters of the Borough centre')\n",
    "\n",
    "ax.annotate('Hillingdon',\n",
    "            (5, 6600))\n",
    "\n",
    "ax.annotate('Richmond Upon Thames',\n",
    "            (3, 8800))\n",
    "\n",
    "ax.annotate('Bromley',(4,5700))\n",
    "\n",
    "ax.annotate('Havering',(5,5800))\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looking at the plot, we see the point representing Havering is the closest to the bottom right corner, this is closely followed by the points representing Hillingdon and Bromley.\n",
    "\n",
    "Another factor to consider is should coffee shops in the same chain (e.g Starbucks) count multiple times in the quantity of coffee shops. Below we investigate how the data looks if we remove these duplicates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bromley has 2 Distinct Coffee Shops and a population density of 5484.0 per square mile.\n",
      "Havering has 2 Distinct Coffee Shops and a population density of 5584.0 per square mile.\n",
      "Hillingdon has 5 Distinct Coffee Shops and a population density of 6421.0 per square mile.\n",
      "Richmond Upon Thames has 3 Distinct Coffee Shops and a population density of 8632.0 per square mile.\n"
     ]
    }
   ],
   "source": [
    "bromley_coffee_distinct = bromley_coffee.drop_duplicates(subset='name',keep='last')\n",
    "\n",
    "print('Bromley has {} Distinct Coffee Shops and a population density of {} per square mile.'.format(len(bromley_coffee_distinct) , df_density.iloc[0,3] ))\n",
    "\n",
    "havering_coffee_distinct = havering_coffee.drop_duplicates(subset='name',keep='last')\n",
    "\n",
    "print('Havering has {} Distinct Coffee Shops and a population density of {} per square mile.'.format(len(havering_coffee_distinct) , df_density.iloc[1,3] ))\n",
    "\n",
    "hillingdon_coffee_distinct = hillingdon_coffee.drop_duplicates(subset='name',keep='last')\n",
    "\n",
    "print('Hillingdon has {} Distinct Coffee Shops and a population density of {} per square mile.'.format(len(hillingdon_coffee_distinct) , df_density.iloc[2,3] ))\n",
    "\n",
    "richmond_upon_thames_coffee_distinct = richmond_upon_thames_coffee.drop_duplicates(subset='name',keep='last')\n",
    "\n",
    "print('Richmond Upon Thames has {} Distinct Coffee Shops and a population density of {} per square mile.'.format(len(richmond_upon_thames_coffee_distinct) , df_density.iloc[3,3]))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will now show this data on a scatter plot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(2, 5800, 'Havering')"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = [len(bromley_coffee_distinct), len(havering_coffee_distinct) , len(hillingdon_coffee_distinct) ,len(richmond_upon_thames_coffee_distinct)]\n",
    "y = df_density['Density']         \n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.scatter(x, y)\n",
    "\n",
    "plt.ylim(4000, 9500)\n",
    "plt.xlim(0,6)\n",
    "plt.title('Population Density vs Number of Coffee shops in London Boroughs')\n",
    "plt.ylabel('Number of people per square mile')\n",
    "plt.xlabel('Number of Coffee shops within 1000 meters of the Borough centre')\n",
    "\n",
    "ax.annotate('Hillingdon',\n",
    "            (5, 6600))\n",
    "\n",
    "ax.annotate('Richmond Upon Thames',\n",
    "            (3, 8800))\n",
    "\n",
    "ax.annotate('Bromley',(2,5150))\n",
    "\n",
    "ax.annotate('Havering',(2,5800))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we see Hillingdon is clearly the closests to the desirable region in the bottom right corner. Both Bromley and Havering become less desirable due to containing multiple coffee shops from the same company."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conclusion\n",
    "\n",
    "In order to answer the question posed by the individual regarding which London Borough would be most appropriate for him to live in, we first scraped data from a Wikipedia table. Next the data was prepared for analyses using pandas. We then compared the population density of different London Boroughs and used the Foursquare API to find coffee shops within a 1km radius of the centre of the borough. Finally, our findings were plotted on a scatter plot in order to help the individual visualise the information.\n",
    "\n",
    "If we go by the definition of total number of coffee shops, then we see Havering is the most appropriate borough. This is closely followed by Hillingdon and Bromley. Therefore, we would recommend all three boroughs to the individual, this would allow him to take into account factors not considered in this report and choose his prefered borough.\n",
    "\n",
    "Looking at the results for when multiple coffee shops of the same chain are counted once, we see Hillingdon is the most appropriate borough. However, this time, it is not closely followed by any other borough. Because of this we would recommend only Hillingdon to the individual.\n",
    "\n",
    "We would return to the individual with both these conclusions and allow him to make his decision based on them. Should none of the boroughs be appropriate for him, we could increase the cut-off point for population density (ie greater than 10,000 per square mile). This would allow more boroughs to be considered and, potentially, a different conclusion to be made."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
